# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'eigenvalue.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
from numpy.linalg import eig
from PyQt5.QtWidgets import QMessageBox

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1182, 540)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(0, 0, 1121, 201))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setStyleSheet("border-color: rgb(0, 0, 0);\n"
"border-width : 1px;\n"
"border-style:inset;")
        self.groupBox.setObjectName("groupBox")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(10, 40, 391, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setGeometry(QtCore.QRect(440, 40, 331, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_3.setGeometry(QtCore.QRect(810, 40, 301, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.radioButton = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton.setGeometry(QtCore.QRect(10, 90, 181, 20))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_2.setGeometry(QtCore.QRect(10, 130, 181, 20))
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_3.setGeometry(QtCore.QRect(10, 170, 181, 20))
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_4 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_4.setGeometry(QtCore.QRect(250, 90, 181, 20))
        self.radioButton_4.setObjectName("radioButton_4")
        self.radioButton_5 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_5.setGeometry(QtCore.QRect(250, 130, 181, 20))
        self.radioButton_5.setObjectName("radioButton_5")
        self.radioButton_6 = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_6.setGeometry(QtCore.QRect(250, 170, 181, 20))
        self.radioButton_6.setObjectName("radioButton_6")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(194, 180, 61, 21))
        self.label.setText("")
        self.label.setObjectName("label")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(0, 270, 1121, 201))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setStyleSheet("border-color: rgb(0, 0, 0);\n"
"border-width : 1px;\n"
"border-style:inset;")
        self.groupBox_2.setObjectName("groupBox_2")
        self.textBrowser = QtWidgets.QTextBrowser(self.groupBox_2)
        self.textBrowser.setGeometry(QtCore.QRect(120, 50, 181, 21))
        self.textBrowser.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.textBrowser.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.textBrowser.setObjectName("textBrowser")
        self.label_5 = QtWidgets.QLabel(self.groupBox_2)
        self.label_5.setGeometry(QtCore.QRect(20, 50, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("border-color: rgb(0, 0, 0);\n"
"border-width : 0px;\n"
"border-style:inset;")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.groupBox_2)
        self.label_6.setGeometry(QtCore.QRect(20, 100, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("border-color: rgb(0, 0, 0);\n"
"border-width : 0px;\n"
"border-style:inset;")
        self.label_6.setObjectName("label_6")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.groupBox_2)
        self.textBrowser_2.setGeometry(QtCore.QRect(140, 100, 181, 21))
        self.textBrowser_2.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.textBrowser_2.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.groupBox_2)
        self.textBrowser_3.setGeometry(QtCore.QRect(460, 40, 181, 21))
        self.textBrowser_3.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.textBrowser_3.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.label_7 = QtWidgets.QLabel(self.groupBox_2)
        self.label_7.setGeometry(QtCore.QRect(350, 40, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("border-color: rgb(0, 0, 0);\n"
"border-width : 0px;\n"
"border-style:inset;")
        self.label_7.setObjectName("label_7")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setEnabled(True)
        self.pushButton.setGeometry(QtCore.QRect(440, 230, 231, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("border-color: rgb(0, 0, 0);\n"
"border-width : 1px;\n"
"")
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1182, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.startApp)
###############################################################################################
        
    def initInputMatrix(self):
        self.ui.tableWidget.verticalHeader().setVisible(False)
        self.ui.tableWidget.horizontalHeader().setVisible(False)  
        self.InitRowsAndColumns()

    def InitRowsAndColumns(self):
        self.ui.tableWidget.setColumnCount(self.N+1)
        self.ui.tableWidget.setRowCount(self.N)
        for row in range(self.ui.tableWidget.rowCount()):
            for col in range(self.ui.tableWidget.columnCount()):
                item = QTableWidgetItem('')
                self.ui.tableWidget.setItem(row, col, item)
            self.ui.tableWidget.setRowHeight(row,int(190/self.N))
        
        for col in range(self.ui.tableWidget.columnCount()):
            self.ui.tableWidget.setColumnWidth(col, int(250 / (self.N + 1)))
        
    def initInputVector(self):
        self.ui.tableWidget_2.setColumnCount(self.N)
        self.ui.tableWidget_2.setRowCount(1)
        self.ui.tableWidget_2.verticalHeader().setVisible(False)
        self.ui.tableWidget_2.horizontalHeader().setVisible(False) 
        for col in range(self.ui.tableWidget_2.columnCount()):
            item = QTableWidgetItem('')
            self.ui.tableWidget_2.setItem(0, col, item)
            self.ui.tableWidget_2.setColumnWidth(col, int(250/(self.N)))
    
    def ValidateMatrixInputs(self):
        self.matrix = []
        try:
            for row in range(self.N):
                OneRow = []
                for col in range(self.N + 1):
                    OneRow.append(float(self.ui.tableWidget.item(row, col).text()))
                self.matrix.append(OneRow)
        except:
            self.show_warning_messagebox('Invalid Matrix Input')
            return
        
    def ValidateVectorInputs(self):
        self.vector = [0]*self.N
        try:
            for col in range(self.N):
                self.vector[col]=(float(self.ui.tableWidget.item(0, col).text()))
        except:
            self.show_warning_messagebox('Invalid Vector Input')
            return

    def ValidateIterations(self):
            try:
                self.iterations = int(self.ui.lineEdit_2.text())
                if (self.iterations<1):
                    raise Exception("Iterations No. should be a positive integer")
            except:
                self.show_warning_messagebox('iterations number should be an integer')
                return

    def ValidateInput(self):
        self.ValidateMatrixInputs()
        self.ValidateVectorInputs()
        self.ValidateW()
        self.ValidateIterations()

    def initInput(self):
            self.ValidateInputN()
            self.initInputMatrix()
            self.initInputVector()

    def ValidateInputN(self):
        try:
            self.N = int(self.ui.lineEdit.text())
            if (self.N<1):
                raise Exception("N should be a positive integer")
        except:
            self.show_warning_messagebox('N should be an integer')
            return

    def startApp(self):  
        
            #ask user to enter the dimensions of a matrix
            text = self.lineEdit.text()  # Get text from QLineEdit
            text = text.replace('[', '').replace(']', '')  # Remove square brackets
            rows = text.split('],')  # Split by '],' to separate rows
            matrix = []

            for row in rows:
                elements = [float(x) for x in row.split(',')]  # Split elements by ',' and convert to float
                matrix.append(elements)

            # Rearrange the matrix to create a list of lists structure
            matrix = [matrix[i:i + len(matrix[0])] for i in range(0, len(matrix), len(matrix[0]))]



            #enter the elements of each index in the matrix
            # for i in range(r1):
            #     c = []
            #     for j in range(c1):
            #         element = float(input("Enter element in row " + str(i) + ", column " + str(j) + ": "))
            #         c.append(element)
            #     matrix1.append(c)
            
            # for i in range(r1):
            #     for j in range(c1):
            #         print(matrix1[i][j], end=" ")
            #     print()
            #ask user to enter the initial eigenvector dimensions
            r2 = int(input("Enter number of rows: "))
            c2 = int(input("Enter number of columns: "))
            matrix2 = []
            #enter the elements of each index of the matrix
            for i in range(r2):
                c = []
                for j in range(c2):
                    element = float(input("Enter element in row " + str(i) + ", column " + str(j) + ": "))
                    c.append(element)
                matrix2.append(c)
            
            for i in range(r2):
                for j in range(c2):
                    print(matrix2[i][j], end=" ")
                print()
            #check if the matrices are multiplicable
            # if c1 != r2:
            #     message_box = QMessageBox()
            #     message_box.setWindowTitle("Invalid Input")
            #     message_box.setIcon(QMessageBox.Warning)
            #     message_box.setText("Polynomial is not less than or equal to Number of Points-1")
            #     message_box.setStandardButtons(QMessageBox.Ok)
            #     message_box.exec_()   
            #     return
            

                #startApp()
            #ask the user to enter a stopping criteria
            iterations = int(input("Enter number of iterations"))
            
            #ask the user to enter a requirement
            # print("required output", "1 maximum eigen value", "2 minimum eigen value", "3 max def matrix", "4 min def mat",
            #     "5 second max", "6 second min", "0 Exit Value")
            # choices1 = ["1 maximum eigen value", "2 minimum eigen value", "3 max def matrix", "4 min def mat", "5 second max",
            #             "6 second min"]
            # choice1 = int(input("Enter your Choice: "))
            # while choice1 !=0:
            #     if choice1 == 1:
            #         print("Maximum Eigen value",maxeigen(matrix1, matrix2, iterations))
            #     elif choice1 == 2:
            #         print("Minimum Eigen value",mineigen(matrix1, matrix2, iterations))
            #     elif choice1 == 3:
            #         print("Maximum deflated matrix",max_deflation_matrix(matrix1, matrix2, maxeigen(matrix1, matrix2, iterations)[0]))
            #     elif choice1 == 4:
            #         print("Minimum deflated matrix",min_deflation_matrix(matrix1, matrix2, mineigen(matrix1, matrix2, iterations)[0]))
            #     elif choice1 == 5:
            #         print("Second maximum eigen value",secondmax(max_deflation_matrix(matrix1, matrix2, maxeigen(matrix1, matrix2, iterations)[0]), matrix2, iterations))
            #     elif choice1 == 6:
            #         print("Second minimum eigen value",secondmin(min_deflation_matrix(matrix1, matrix2, mineigen(matrix1, matrix2, iterations)[0]), matrix2, iterations))
            #     else:
            #         print("Invalid choice. Please try again.")
            #     choice1 = int(input("Enter your Choice: "))
        #Get the maximum eigenvalue and its corresponding eigenvector 
    def maxeigen(matrix1, matrix2, iterations):
        lamda_max = 0
        for i in range(iterations):
            x = np.matmul(matrix1, matrix2)
            temp = abs(x)
            x = x / temp.max()
            lamda_max = temp.max()
        return (lamda_max, x)
    #Get the minimum eigenvalue and its corresponding eigenvector
    def mineigen(matrix1, matrix2, iterations):
        inv = np.linalg.inv(matrix1)
        lamda_min = 0
        for i in range(iterations):
            x = np.matmul(inv, matrix2)
            temp = abs(x)
            x = x / temp.max()
            lamda_min = 1 / temp.max()
        return (lamda_min, x)
    #Get the maximum deflation matrix
    def max_deflation_matrix(matrix1, matrix2, lamda_max):
        matrix2_norm_sq = np.linalg.norm(matrix2)**2
        matrix2_t = np.transpose(matrix2)
        result_matrix=[[element*lamda_max for element in row] for row in matrix2]
        max_deflation_matrix = matrix1 -  result_matrix @ matrix2_t / matrix2_norm_sq
        return max_deflation_matrix

    #Get the minimum deflation matrix
    def min_deflation_matrix(matrix1, matrix2,lamda_min):
        matrix2_norm_sq = np.linalg.norm(matrix2)**2
        matrix2_t = np.transpose(matrix2)
        matrix1_inv=np.linalg.inv(matrix1)
        result_matrix=[[element*lamda_min for element in row] for row in matrix2]
        min_deflation_matrix = matrix1_inv - result_matrix @ matrix2_t / matrix2_norm_sq
        return min_deflation_matrix
    #Get the second maximum eign value 
    def secondmax(max_deflation_matrix, matrix2, iterations):
        second_max = 0 
        for i in range(iterations):
            x = np.matmul(max_deflation_matrix, matrix2)
            temp = abs(x)
            x = x / temp.max()
            second_max = temp.max()
        return (second_max, x)
    #Get the second minimum eign value 
    def secondmin(min_deflation_matrix, matrix2, iterations):
        inv = np.linalg.inv(min_deflation_matrix)
        second_min = 0 
        for i in range(iterations):
            x = np.matmul(inv, matrix2)
            temp = abs(x)
            x = x / temp.max()
            second_min = 1 / temp.max()
        return (second_min, x)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Inputs"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "Enter a matrix e.g. [1,2,...],[3,4,...],..."))
        self.lineEdit_2.setPlaceholderText(_translate("MainWindow", "Enter second matrix to find the eigen value"))
        self.lineEdit_3.setPlaceholderText(_translate("MainWindow", "Enter number of iterations"))
        self.radioButton.setText(_translate("MainWindow", "Find maximum eigen value"))
        self.radioButton_2.setText(_translate("MainWindow", "Find minimum eigen value"))
        self.radioButton_3.setText(_translate("MainWindow", "Find max def matrix"))
        self.radioButton_4.setText(_translate("MainWindow", "Find min def matrix"))
        self.radioButton_5.setText(_translate("MainWindow", "sec max"))
        self.radioButton_6.setText(_translate("MainWindow", "sec min"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Outputs"))
        self.label_5.setText(_translate("MainWindow", "Eigen Value"))
        self.label_6.setText(_translate("MainWindow", "Deflated Matrix"))
        self.label_7.setText(_translate("MainWindow", "Eigen Vector"))
        self.pushButton.setText(_translate("MainWindow", "Proceed"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
