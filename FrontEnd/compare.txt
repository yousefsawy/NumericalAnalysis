def show_result(self):
        # Validate that all y values are numbers and not empty
        points = []
        for i in range(1, self.table.columnCount()):
            item = self.table.item(1, i)
            if not item or not item.text().strip():
                show_alert("Please enter valid numbers for all y values.")
                return

            try:
                y_value = float(item.text())
            except ValueError:
                show_alert("Please enter valid numbers for all y values.")
                return

            x_value = float(self.table.item(0, i).text())
            points.append(Point(x_value, y_value))

        # Check if all y values are valid
        if len(points) == self.table.columnCount() - 1:
            try:
                a_points, b_points = points[0].x, points[-1].x

                # result, error = simpsons_3_8_rule(
                # lambda x: np.interp(x, [point.x for point in points], [point.y for point in points]),
                # a_points, b_points, n, user_choice)

                # Display the result and error
                self.result_label.setText(f"Result: {result}")
                self.error_label.setText(f"Error: {error}")
            except Exception as e:
                show_alert("Error during calculations.")
                return
        else:
            show_alert("Please enter valid numbers for all y values.")
            # Placeholder for your result calculation
            result = "Result: N/A"
            error = "Error: N/A"
            # Display the result and error
            self.result_label.setText(result)
            self.error_label.setText(error)