# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PredictorCorrector.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
import math
from scipy.interpolate import interp1d
import sympy as sp

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Predictor(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(459, 649)
        MainWindow.setStyleSheet("/*\n"
"Material Dark Style Sheet for QT Applications\n"
"Author: Jaime A. Quiroga P.\n"
"Inspired on https://github.com/jxfwinter/qt-material-stylesheet\n"
"Company: GTRONICK\n"
"Last updated: 04/12/2018, 15:00.\n"
"Available at: https://github.com/GTRONICK/QSS/blob/master/MaterialDark.qss\n"
"*/\n"
"QMainWindow {\n"
"    background-color:#1e1d23;\n"
"}\n"
"QDialog {\n"
"    background-color:#1e1d23;\n"
"}\n"
"QColorDialog {\n"
"    background-color:#1e1d23;\n"
"}\n"
"QTextEdit {\n"
"    background-color:#1e1d23;\n"
"    color: #a9b7c6;\n"
"}\n"
"QPlainTextEdit {\n"
"    selection-background-color:#007b50;\n"
"    background-color:#1e1d23;\n"
"    border-style: solid;\n"
"    border-top-color: transparent;\n"
"    border-right-color: transparent;\n"
"    border-left-color: transparent;\n"
"    border-bottom-color: transparent;\n"
"    border-width: 1px;\n"
"    color: #a9b7c6;\n"
"}\n"
"\n"
"QToolButton {\n"
"    border-style: solid;\n"
"    border-top-color: transparent;\n"
"    border-right-color: transparent;\n"
"    border-left-color: transparent;\n"
"    border-bottom-color: #04b97f;\n"
"    border-bottom-width: 1px;\n"
"    border-style: solid;\n"
"    color: #a9b7c6;\n"
"    padding: 2px;\n"
"    background-color: #1e1d23;\n"
"}\n"
"QToolButton:hover{\n"
"    border-style: solid;\n"
"    border-top-color: transparent;\n"
"    border-right-color: transparent;\n"
"    border-left-color: transparent;\n"
"    border-bottom-color: #37efba;\n"
"    border-bottom-width: 2px;\n"
"    border-style: solid;\n"
"    color: #FFFFFF;\n"
"    padding-bottom: 1px;\n"
"    background-color: #1e1d23;\n"
"}\n"
"\n"
"QLineEdit {\n"
"    border-width: 1px; border-radius: 4px;\n"
"    border-color: rgb(58, 58, 58);\n"
"    border-style: inset;\n"
"    padding: 0 8px;\n"
"    color: #a9b7c6;\n"
"    background:#1e1d23;\n"
"    selection-background-color:#007b50;\n"
"    selection-color: #FFFFFF;\n"
"}\n"
"QLabel {\n"
"    color: #a9b7c6;\n"
"}\n"
"QLCDNumber {\n"
"    color: #37e6b4;\n"
"}\n"
"QProgressBar {\n"
"    text-align: center;\n"
"    color: rgb(240, 240, 240);\n"
"    border-width: 1px; \n"
"    border-radius: 10px;\n"
"    border-color: rgb(58, 58, 58);\n"
"    border-style: inset;\n"
"    background-color:#1e1d23;\n"
"}\n"
"QProgressBar::chunk {\n"
"    background-color: #04b97f;\n"
"    border-radius: 5px;\n"
"}\n"
"QMenuBar {\n"
"    background-color: #1e1d23;\n"
"}\n"
"QMenuBar::item {\n"
"    color: #a9b7c6;\n"
"      spacing: 3px;\n"
"      padding: 1px 4px;\n"
"      background: #1e1d23;\n"
"}\n"
"\n"
"QMenuBar::item:selected {\n"
"      background:#1e1d23;\n"
"    color: #FFFFFF;\n"
"}\n"
"QMenu::item:selected {\n"
"    border-style: solid;\n"
"    border-top-color: transparent;\n"
"    border-right-color: transparent;\n"
"    border-left-color: #04b97f;\n"
"    border-bottom-color: transparent;\n"
"    border-left-width: 2px;\n"
"    color: #FFFFFF;\n"
"    padding-left:15px;\n"
"    padding-top:4px;\n"
"    padding-bottom:4px;\n"
"    padding-right:7px;\n"
"    background-color: #1e1d23;\n"
"}\n"
"QMenu::item {\n"
"    border-style: solid;\n"
"    border-top-color: transparent;\n"
"    border-right-color: transparent;\n"
"    border-left-color: transparent;\n"
"    border-bottom-color: transparent;\n"
"    border-bottom-width: 1px;\n"
"    border-style: solid;\n"
"    color: #a9b7c6;\n"
"    padding-left:17px;\n"
"    padding-top:4px;\n"
"    padding-bottom:4px;\n"
"    padding-right:7px;\n"
"    background-color: #1e1d23;\n"
"}\n"
"QMenu{\n"
"    background-color:#1e1d23;\n"
"}\n"
"QTabWidget {\n"
"    color:rgb(0,0,0);\n"
"    background-color:#1e1d23;\n"
"}\n"
"QTabWidget::pane {\n"
"        border-color: rgb(77,77,77);\n"
"        background-color:#1e1d23;\n"
"        border-style: solid;\n"
"        border-width: 1px;\n"
"        border-radius: 6px;\n"
"}\n"
"QTabBar::tab {\n"
"    border-style: solid;\n"
"    border-top-color: transparent;\n"
"    border-right-color: transparent;\n"
"    border-left-color: transparent;\n"
"    border-bottom-color: transparent;\n"
"    border-bottom-width: 1px;\n"
"    border-style: solid;\n"
"    color: #808086;\n"
"    padding: 3px;\n"
"    margin-left:3px;\n"
"    background-color: #1e1d23;\n"
"}\n"
"QTabBar::tab:selected, QTabBar::tab:last:selected, QTabBar::tab:hover {\n"
"      border-style: solid;\n"
"    border-top-color: transparent;\n"
"    border-right-color: transparent;\n"
"    border-left-color: transparent;\n"
"    border-bottom-color: #04b97f;\n"
"    border-bottom-width: 2px;\n"
"    border-style: solid;\n"
"    color: #FFFFFF;\n"
"    padding-left: 3px;\n"
"    padding-bottom: 2px;\n"
"    margin-left:3px;\n"
"    background-color: #1e1d23;\n"
"}\n"
"\n"
"QCheckBox {\n"
"    color: #a9b7c6;\n"
"    padding: 2px;\n"
"}\n"
"QCheckBox:disabled {\n"
"    color: #808086;\n"
"    padding: 2px;\n"
"}\n"
"\n"
"QCheckBox:hover {\n"
"    border-radius:4px;\n"
"    border-style:solid;\n"
"    padding-left: 1px;\n"
"    padding-right: 1px;\n"
"    padding-bottom: 1px;\n"
"    padding-top: 1px;\n"
"    border-width:1px;\n"
"    border-color: rgb(87, 97, 106);\n"
"    background-color:#1e1d23;\n"
"}\n"
"QCheckBox::indicator:checked {\n"
"\n"
"    height: 10px;\n"
"    width: 10px;\n"
"    border-style:solid;\n"
"    border-width: 1px;\n"
"    border-color: #04b97f;\n"
"    color: #a9b7c6;\n"
"    background-color: #04b97f;\n"
"}\n"
"QCheckBox::indicator:unchecked {\n"
"\n"
"    height: 10px;\n"
"    width: 10px;\n"
"    border-style:solid;\n"
"    border-width: 1px;\n"
"    border-color: #04b97f;\n"
"    color: #a9b7c6;\n"
"    background-color: transparent;\n"
"}\n"
"QRadioButton {\n"
"    color: #a9b7c6;\n"
"    background-color: #1e1d23;\n"
"    padding: 1px;\n"
"}\n"
"QRadioButton::indicator:checked {\n"
"    height: 10px;\n"
"    width: 10px;\n"
"    border-style:solid;\n"
"    border-radius:5px;\n"
"    border-width: 1px;\n"
"    border-color: #04b97f;\n"
"    color: #a9b7c6;\n"
"    background-color: #04b97f;\n"
"}\n"
"QRadioButton::indicator:!checked {\n"
"    height: 10px;\n"
"    width: 10px;\n"
"    border-style:solid;\n"
"    border-radius:5px;\n"
"    border-width: 1px;\n"
"    border-color: #04b97f;\n"
"    color: #a9b7c6;\n"
"    background-color: transparent;\n"
"}\n"
"QStatusBar {\n"
"    color:#027f7f;\n"
"}\n"
"QSpinBox {\n"
"    color: #a9b7c6;    \n"
"    background-color: #1e1d23;\n"
"}\n"
"QDoubleSpinBox {\n"
"    color: #a9b7c6;    \n"
"    background-color: #1e1d23;\n"
"}\n"
"QTimeEdit {\n"
"    color: #a9b7c6;    \n"
"    background-color: #1e1d23;\n"
"}\n"
"QDateTimeEdit {\n"
"    color: #a9b7c6;    \n"
"    background-color: #1e1d23;\n"
"}\n"
"QDateEdit {\n"
"    color: #a9b7c6;    \n"
"    background-color: #1e1d23;\n"
"}\n"
"QComboBox {\n"
"    color: #a9b7c6;    \n"
"    background: #1e1d23;\n"
"}\n"
"QComboBox:editable {\n"
"    background: #1e1d23;\n"
"    color: #a9b7c6;\n"
"    selection-background-color: #1e1d23;\n"
"}\n"
"QComboBox QAbstractItemView {\n"
"    color: #a9b7c6;    \n"
"    background: #1e1d23;\n"
"    selection-color: #FFFFFF;\n"
"    selection-background-color: #1e1d23;\n"
"}\n"
"QComboBox:!editable:on, QComboBox::drop-down:editable:on {\n"
"    color: #a9b7c6;    \n"
"    background: #1e1d23;\n"
"}\n"
"QFontComboBox {\n"
"    color: #a9b7c6;    \n"
"    background-color: #1e1d23;\n"
"}\n"
"QToolBox {\n"
"    color: #a9b7c6;\n"
"    background-color: #1e1d23;\n"
"}\n"
"QToolBox::tab {\n"
"    color: #a9b7c6;\n"
"    background-color: #1e1d23;\n"
"}\n"
"QToolBox::tab:selected {\n"
"    color: #FFFFFF;\n"
"    background-color: #1e1d23;\n"
"}\n"
"QScrollArea {\n"
"    color: #FFFFFF;\n"
"    background-color: #1e1d23;\n"
"}\n"
"QSlider::groove:horizontal {\n"
"    height: 5px;\n"
"    background: #04b97f;\n"
"}\n"
"QSlider::groove:vertical {\n"
"    width: 5px;\n"
"    background: #04b97f;\n"
"}\n"
"QSlider::handle:horizontal {\n"
"    background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #b4b4b4, stop:1 #8f8f8f);\n"
"    border: 1px solid #5c5c5c;\n"
"    width: 14px;\n"
"    margin: -5px 0;\n"
"    border-radius: 7px;\n"
"}\n"
"QSlider::handle:vertical {\n"
"    background: qlineargradient(x1:1, y1:1, x2:0, y2:0, stop:0 #b4b4b4, stop:1 #8f8f8f);\n"
"    border: 1px solid #5c5c5c;\n"
"    height: 14px;\n"
"    margin: 0 -5px;\n"
"    border-radius: 7px;\n"
"}\n"
"QSlider::add-page:horizontal {\n"
"    background: white;\n"
"}\n"
"QSlider::add-page:vertical {\n"
"    background: white;\n"
"}\n"
"QSlider::sub-page:horizontal {\n"
"    background: #04b97f;\n"
"}\n"
"QSlider::sub-page:vertical {\n"
"    background: #04b97f;\n"
"}\n"
"/*split*/\n"
"QPushButton{\n"
"    border-style: solid;\n"
"    border-color: #050a0e;\n"
"    border-width: 1px;\n"
"    border-radius: 5px;\n"
"    color: #d3dae3;\n"
"    padding: 2px;\n"
"    background-color: #100E19;\n"
"}\n"
"QPushButton::default{\n"
"    border-style: solid;\n"
"    border-color: #050a0e;\n"
"    border-width: 1px;\n"
"    border-radius: 5px;\n"
"    color: #FFFFFF;\n"
"    padding: 2px;\n"
"    background-color: #151a1e;\n"
"}\n"
"QPushButton:hover{\n"
"    border-style: solid;\n"
"    border-top-color: qlineargradient(spread:pad, x1:0, y1:1, x2:1, y2:1, stop:0 #C0DB50, stop:0.4 #C0DB50, stop:0.5 #100E19, stop:1 #100E19);\n"
"    border-bottom-color: qlineargradient(spread:pad, x1:0, y1:1, x2:1, y2:1, stop:0 #100E19, stop:0.5 #100E19, stop:0.6 #C0DB50, stop:1 #C0DB50);\n"
"    border-left-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #C0DB50, stop:0.3 #C0DB50, stop:0.7 #100E19, stop:1 #100E19);\n"
"    border-right-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #C0DB50, stop:0.3 #C0DB50, stop:0.7 #100E19, stop:1 #100E19);\n"
"    border-width: 2px;\n"
"    border-radius: 1px;\n"
"    color: #d3dae3;\n"
"    padding: 2px;\n"
"}\n"
"QPushButton:pressed{\n"
"    border-style: solid;\n"
"    border-top-color: qlineargradient(spread:pad, x1:0, y1:1, x2:1, y2:1, stop:0 #d33af1, stop:0.4 #d33af1, stop:0.5 #100E19, stop:1 #100E19);\n"
"    border-bottom-color: qlineargradient(spread:pad, x1:0, y1:1, x2:1, y2:1, stop:0 #100E19, stop:0.5 #100E19, stop:0.6 #d33af1, stop:1 #d33af1);\n"
"    border-left-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #d33af1, stop:0.3 #d33af1, stop:0.7 #100E19, stop:1 #100E19);\n"
"    border-right-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #d33af1, stop:0.3 #d33af1, stop:0.7 #100E19, stop:1 #100E19);\n"
"    border-width: 2px;\n"
"    border-radius: 1px;\n"
"    color: #d3dae3;\n"
"    padding: 2px;\n"
"}\n"
"\n"
"QStackedWidget {\n"
"    background-color: #1e1d23;\n"
"    border: 1px solid rgb(77, 77, 77);\n"
"    border-radius: 6px;\n"
"}\n"
"\n"
"QStackedWidget {\n"
"    background-color: #1e1d23;\n"
"    border: 1px solid rgb(77, 77, 77);\n"
"    border-radius: 6px;\n"
"}\n"
"\n"
"QStackedWidget::widget {\n"
"    padding: 6px;\n"
"}\n"
"\n"
"QStackedWidget::widget:selected {\n"
"    background-color: #1e1d23;\n"
"    border-bottom: 2px solid #04b97f;\n"
"}\n"
"\n"
"QStackedWidget::widget:hover {\n"
"    border-bottom: 1px solid #04b97f;\n"
"}\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 451, 621))
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setObjectName("tabWidget")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.textEdit = QtWidgets.QTextEdit(self.tab_3)
        self.textEdit.setGeometry(QtCore.QRect(10, 80, 191, 31))
        self.textEdit.setObjectName("textEdit")
        self.textEdit_4 = QtWidgets.QTextEdit(self.tab_3)
        self.textEdit_4.setGeometry(QtCore.QRect(10, 230, 191, 31))
        self.textEdit_4.setObjectName("textEdit_4")
        self.label_3 = QtWidgets.QLabel(self.tab_3)
        self.label_3.setGeometry(QtCore.QRect(210, 190, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.textEdit_2 = QtWidgets.QTextEdit(self.tab_3)
        self.textEdit_2.setGeometry(QtCore.QRect(10, 130, 191, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label = QtWidgets.QLabel(self.tab_3)
        self.label.setGeometry(QtCore.QRect(210, 80, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.tab_3)
        self.label_2.setGeometry(QtCore.QRect(210, 130, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.textEdit_3 = QtWidgets.QTextEdit(self.tab_3)
        self.textEdit_3.setGeometry(QtCore.QRect(10, 180, 191, 31))
        self.textEdit_3.setObjectName("textEdit_3")
        self.label_4 = QtWidgets.QLabel(self.tab_3)
        self.label_4.setGeometry(QtCore.QRect(210, 230, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_10 = QtWidgets.QLabel(self.tab_3)
        self.label_10.setGeometry(QtCore.QRect(20, 410, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.textEdit_6 = QtWidgets.QTextEdit(self.tab_3)
        self.textEdit_6.setEnabled(False)
        self.textEdit_6.setGeometry(QtCore.QRect(10, 0, 421, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.textEdit_6.setFont(font)
        self.textEdit_6.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.textEdit_6.setDocumentTitle("")
        self.textEdit_6.setObjectName("textEdit_6")
        self.label_12 = QtWidgets.QLabel(self.tab_3)
        self.label_12.setGeometry(QtCore.QRect(110, 420, 321, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setText("")
        self.label_12.setObjectName("label_12")
        self.line_2 = QtWidgets.QFrame(self.tab_3)
        self.line_2.setGeometry(QtCore.QRect(10, 320, 411, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.pushButton = QtWidgets.QPushButton(self.tab_3)
        self.pushButton.setGeometry(QtCore.QRect(10, 280, 191, 28))
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.setObjectName("pushButton")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.label_6 = QtWidgets.QLabel(self.tab_4)
        self.label_6.setGeometry(QtCore.QRect(20, 20, 55, 16))
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.label_15 = QtWidgets.QLabel(self.tab_4)
        self.label_15.setGeometry(QtCore.QRect(220, 80, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.tab_4)
        self.label_16.setGeometry(QtCore.QRect(220, 190, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.textEdit_11 = QtWidgets.QTextEdit(self.tab_4)
        self.textEdit_11.setGeometry(QtCore.QRect(10, 130, 191, 31))
        self.textEdit_11.setObjectName("textEdit_11")
        self.label_17 = QtWidgets.QLabel(self.tab_4)
        self.label_17.setGeometry(QtCore.QRect(220, 280, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.line_4 = QtWidgets.QFrame(self.tab_4)
        self.line_4.setGeometry(QtCore.QRect(20, 360, 411, 20))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.textEdit_12 = QtWidgets.QTextEdit(self.tab_4)
        self.textEdit_12.setGeometry(QtCore.QRect(10, 80, 191, 31))
        self.textEdit_12.setObjectName("textEdit_12")
        self.pushButton_3 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 330, 191, 28))
        self.pushButton_3.setAutoFillBackground(False)
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_18 = QtWidgets.QLabel(self.tab_4)
        self.label_18.setGeometry(QtCore.QRect(20, 420, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.textEdit_13 = QtWidgets.QTextEdit(self.tab_4)
        self.textEdit_13.setGeometry(QtCore.QRect(10, 280, 191, 31))
        self.textEdit_13.setObjectName("textEdit_13")
        self.textEdit_14 = QtWidgets.QTextEdit(self.tab_4)
        self.textEdit_14.setEnabled(False)
        self.textEdit_14.setGeometry(QtCore.QRect(10, 0, 421, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.textEdit_14.setFont(font)
        self.textEdit_14.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.textEdit_14.setDocumentTitle("")
        self.textEdit_14.setObjectName("textEdit_14")
        self.label_19 = QtWidgets.QLabel(self.tab_4)
        self.label_19.setGeometry(QtCore.QRect(220, 130, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_19.setFont(font)
        self.label_19.setObjectName("label_19")
        self.textEdit_15 = QtWidgets.QTextEdit(self.tab_4)
        self.textEdit_15.setGeometry(QtCore.QRect(10, 180, 191, 31))
        self.textEdit_15.setObjectName("textEdit_15")
        self.textEdit_21 = QtWidgets.QTextEdit(self.tab_4)
        self.textEdit_21.setGeometry(QtCore.QRect(10, 230, 191, 31))
        self.textEdit_21.setObjectName("textEdit_21")
        self.label_25 = QtWidgets.QLabel(self.tab_4)
        self.label_25.setGeometry(QtCore.QRect(220, 240, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_25.setFont(font)
        self.label_25.setObjectName("label_25")
        self.label_27 = QtWidgets.QLabel(self.tab_4)
        self.label_27.setGeometry(QtCore.QRect(110, 420, 321, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_27.setFont(font)
        self.label_27.setText("")
        self.label_27.setObjectName("label_27")
        self.tabWidget.addTab(self.tab_4, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.label_20 = QtWidgets.QLabel(self.tab)
        self.label_20.setGeometry(QtCore.QRect(220, 80, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.label_21 = QtWidgets.QLabel(self.tab)
        self.label_21.setGeometry(QtCore.QRect(220, 190, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.textEdit_16 = QtWidgets.QTextEdit(self.tab)
        self.textEdit_16.setGeometry(QtCore.QRect(10, 130, 191, 31))
        self.textEdit_16.setObjectName("textEdit_16")
        self.label_22 = QtWidgets.QLabel(self.tab)
        self.label_22.setGeometry(QtCore.QRect(220, 280, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_22.setFont(font)
        self.label_22.setObjectName("label_22")
        self.line_5 = QtWidgets.QFrame(self.tab)
        self.line_5.setGeometry(QtCore.QRect(20, 360, 411, 20))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.textEdit_17 = QtWidgets.QTextEdit(self.tab)
        self.textEdit_17.setGeometry(QtCore.QRect(10, 80, 191, 31))
        self.textEdit_17.setObjectName("textEdit_17")
        self.pushButton_4 = QtWidgets.QPushButton(self.tab)
        self.pushButton_4.setGeometry(QtCore.QRect(10, 330, 191, 28))
        self.pushButton_4.setAutoFillBackground(False)
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_23 = QtWidgets.QLabel(self.tab)
        self.label_23.setGeometry(QtCore.QRect(20, 420, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_23.setFont(font)
        self.label_23.setObjectName("label_23")
        self.textEdit_18 = QtWidgets.QTextEdit(self.tab)
        self.textEdit_18.setGeometry(QtCore.QRect(10, 280, 191, 31))
        self.textEdit_18.setObjectName("textEdit_18")
        self.textEdit_19 = QtWidgets.QTextEdit(self.tab)
        self.textEdit_19.setEnabled(False)
        self.textEdit_19.setGeometry(QtCore.QRect(10, 0, 421, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.textEdit_19.setFont(font)
        self.textEdit_19.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.textEdit_19.setDocumentTitle("")
        self.textEdit_19.setObjectName("textEdit_19")
        self.label_24 = QtWidgets.QLabel(self.tab)
        self.label_24.setGeometry(QtCore.QRect(220, 130, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_24.setFont(font)
        self.label_24.setObjectName("label_24")
        self.textEdit_20 = QtWidgets.QTextEdit(self.tab)
        self.textEdit_20.setGeometry(QtCore.QRect(10, 180, 191, 31))
        self.textEdit_20.setObjectName("textEdit_20")
        self.textEdit_22 = QtWidgets.QTextEdit(self.tab)
        self.textEdit_22.setGeometry(QtCore.QRect(10, 230, 191, 31))
        self.textEdit_22.setObjectName("textEdit_22")
        self.label_26 = QtWidgets.QLabel(self.tab)
        self.label_26.setGeometry(QtCore.QRect(210, 240, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_26.setFont(font)
        self.label_26.setObjectName("label_26")
        self.label_28 = QtWidgets.QLabel(self.tab)
        self.label_28.setGeometry(QtCore.QRect(110, 410, 321, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_28.setFont(font)
        self.label_28.setText("")
        self.label_28.setObjectName("label_28")
        self.tabWidget.addTab(self.tab, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 459, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton.clicked.connect(self.First1)
        self.pushButton_3.clicked.connect(self.Second)
        self.pushButton_4.clicked.connect(self.Third)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "Y Values"))
        self.label.setText(_translate("MainWindow", "Function"))
        self.label_2.setText(_translate("MainWindow", "X Values"))
        self.label_4.setText(_translate("MainWindow", "N"))
        self.label_10.setText(_translate("MainWindow", "Answer = "))
        self.textEdit_6.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:16pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Predictor Corrector</p></body></html>"))
        self.textEdit_6.setPlaceholderText(_translate("MainWindow", "Numerical Analysis"))
        self.pushButton.setText(_translate("MainWindow", "Calculate"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "First Order X,Y"))
        self.label_15.setText(_translate("MainWindow", "Function"))
        self.label_16.setText(_translate("MainWindow", "Y Values"))
        self.label_17.setText(_translate("MainWindow", "N"))
        self.pushButton_3.setText(_translate("MainWindow", "Calculate"))
        self.label_18.setText(_translate("MainWindow", "Answer = "))
        self.textEdit_14.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:16pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Predictor Corrector</p></body></html>"))
        self.textEdit_14.setPlaceholderText(_translate("MainWindow", "Numerical Analysis"))
        self.label_19.setText(_translate("MainWindow", "X Values"))
        self.label_25.setText(_translate("MainWindow", "Z Values"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "First Order X,Y,Z"))
        self.label_20.setText(_translate("MainWindow", "Function"))
        self.label_21.setText(_translate("MainWindow", "Y Values"))
        self.label_22.setText(_translate("MainWindow", "N"))
        self.pushButton_4.setText(_translate("MainWindow", "Calculate"))
        self.label_23.setText(_translate("MainWindow", "Answer = "))
        self.textEdit_19.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:16pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Predictor Corrector</p></body></html>"))
        self.textEdit_19.setPlaceholderText(_translate("MainWindow", "Numerical Analysis"))
        self.label_24.setText(_translate("MainWindow", "X Values"))
        self.label_26.setText(_translate("MainWindow", " Z Values"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Second Order X,Y,Z"))

    def First1(self):
        funct = self.textEdit.toPlainText()
        funct = self.convert_to_function1(funct)

        x_val = self.textEdit_2.toPlainText()
        x_val = x_val.split(" ")
        x_val = [float(value) for value in x_val]

        y_val = self.textEdit_3.toPlainText()
        y_val = y_val.split(" ")
        y_val = [float(value) for value in y_val]

        N = self.textEdit_4.toPlainText()
        N = int(N)
        sol = self.predictor1(funct,x_val,y_val,N)
        self.label_12.setText(str(sol))

    def Second(self):
            funct = self.textEdit_12.toPlainText()
            funct = self.convert_to_function2(funct)

            x_val = self.textEdit_11.toPlainText()
            x_val = x_val.split(" ")
            x_val = [float(value) for value in x_val]

            y_val = self.textEdit_15.toPlainText()
            y_val = y_val.split(" ")
            y_val = [float(value) for value in y_val]

            z_val = self.textEdit_21.toPlainText()
            z_val = z_val.split(" ")
            z_val = [float(value) for value in z_val]

            N = self.textEdit_13.toPlainText()
            N = int(N)
            sol = self.predictor2(funct, x_val, y_val, z_val, N)
            self.label_27.setText(str(sol))

    def Third(self):
            funct = self.textEdit_17.toPlainText()
            funct = self.process_equation(funct)
            funct = self.convert_to_function2(funct)

            x_val = self.textEdit_16.toPlainText()
            x_val = x_val.split(" ")
            x_val = [float(value) for value in x_val]

            y_val = self.textEdit_20.toPlainText()
            y_val = y_val.split(" ")
            y_val = [float(value) for value in y_val]

            z_val = self.textEdit_22.toPlainText()
            z_val = z_val.split(" ")
            z_val = [float(value) for value in z_val]

            N = self.textEdit_18.toPlainText()
            N = int(N)
            sol = self.predictor3(funct, x_val, y_val, z_val, N)
            self.label_28.setText(str(sol))

    def convert_to_function1(self,input_string):
            # Replace sin, cos, ln, exp with math.sin, math.cos, math.log, math.exp respectively
            input_string = input_string.replace('sin', 'np.sin')
            input_string = input_string.replace('cos', 'np.cos')
            input_string = input_string.replace('ln', 'np.log')
            input_string = input_string.replace('exp', 'np.exp')

            def func(x, y):
                    return eval(input_string)

            return func

    def convert_to_function2(self,input_string):
        # Replace sin, cos, ln, exp with math.sin, math.cos, math.log, math.exp respectively
        input_string = input_string.replace('sin', 'np.sin')
        input_string = input_string.replace('cos', 'np.cos')
        input_string = input_string.replace('ln', 'np.log')
        input_string = input_string.replace('exp', 'np.exp')

        def func(x, y, z):
            return eval(input_string)

        return func

    def process_equation(self,s):
        s = s.replace(" ", "").strip()
        other_side = "0"

        idx = s.find("r")
        if idx == -1:
            print("r not found")
            return None

        # Find the start
        start = idx - 1
        while start >= 0:
            c = s[start]
            if c == '+' or c == '-':
                break
            start -= 1

        if start != -1:
            other_side += f"-({s[:start]})"

        # Find the end
        end = idx + 1
        while end < len(s):
            c = s[end]
            if c == '+' or c == '-':
                break
            end += 1

        if end != len(s):
            other_side += f"-({s[end + 1:]})"

        r_term = s[start + 1:end]
        first_part = r_term[:idx - start - 1]
        second_part = r_term[idx - start:end - 1]

        intersection = (first_part[-1] if first_part else "") + (second_part[0] if second_part else "")

        op = intersection
        if intersection == "**":
            op = "*"

        fp = first_part[:-1] if first_part else ""
        sp = second_part[1:] if second_part else ""

        term = fp + op + sp
        other_side = f"({other_side})/({1 if not term else ''})"

        return other_side

    def predictor3(self, F, R, Q, Z, n):
        # Define the ODE function
        # print(equ)

        if len(R) > 3 and len(Q) > 3:
            if len(R) == len(Q):
                z = R[-1] - R[-2]
                x_end = R[-1] + z

                x_start = R[-4]
                # Set up initial values and parameters
                A = x_start  # starting time
                B = x_end  # ending time

                N = 4  # number of subintervals which is always 4 because the the adam bashforth formula with 4 used

                # Provide initial arrays for t and y (not necessarily at the same intervals)
                # put x array in t_intial
                t_initial = R
                # put y array in y_intial
                y_initial = Q
                z_value = Z
                # Interpolate the initial values to match the desired time steps

                # we could remove the interpolate and just substiute give function but
                # we interpoleted to check things in between  the values because we found out at first we substuited wrong
                # so we used inter polition and just didnt want to change it
                y_interpolated = interp1d(t_initial, y_initial, kind='linear', fill_value="extrapolate")
                z_interpolated = interp1d(t_initial, z_value, kind='linear', fill_value="extrapolate")

                # Initialize arrays
                # T is the x/time intervel array with the t or x that u want to calculate at

                T = np.linspace(A, B, N + 1)

                # W is the the value of the function  with the y  and x that you want to calculate value of the function
                W = np.zeros(N + 1)

                V = np.zeros(N + 1)
                # Output file setup

                # Initialize using interpolated initial values
                # W is the y/y intervel array with the y that you want to calculate value of the function
                for i in range(N + 1):
                    W[i] = y_interpolated(T[i])
                #    print(f"{i + 1}   {T[i]:.3f} {W[i]:.7f}")
                for i in range(N + 1):
                    V[i] = z_interpolated(T[i])
                #    print(f"{i + 1}   {T[i]:.3f} {W[i]:.7f}")

                # time end-time end/number of intervels
                # Calculate step size
                H = (B - A) / N

                # Predictor-corrector method for the remaining steps

                # Predictor step
                Part1 = 55.0 * F(T[-2], W[-2], V[-2]) - 59.0 * F(T[-3], W[-3], V[-3]) + 37.0 * F(T[-4], W[-4], V[-4])
                Part2 = -9.0 * F(T[-5], W[-5], V[-5])
                Wn = W[-2] + H * (Part1 + Part2) / 24.0
                Vn = V[-2] + H * (Part1 + Part2) / 24.0

                # corrector step
                # for i in range(n):
                Part1 = 9.0 * F(T[-1], Wn, Vn) + 19.0 * F(T[-2], W[-2], V[-2]) - 5.0 * F(T[-3], W[-3], V[-3]) + F(T[-4],
                                                                                                                  W[-4],
                                                                                                                  V[-4])
                print(F(T[-1], Wn, Vn))
                W[-1] = W[-2] + H * (Part1) / 24.0
                Wn = W[-1]
                V[-1] = V[-1] + H * Part1 / 24.0
                Vn = V[-1]

                # print(F(T[-1],W[-1]))
                print("this is the y corrected")
                return W[-1]
            else:
                print("not equal array sizes")
        else:
            print("minimum array size is 4")

    def predictor2(self, F, R, Q, Z, n):
        # Define the ODE function
        if len(R) > 3 and len(Q) > 3:
            if len(R) == len(Q):
                z = R[-1] - R[-2]
                x_end = R[-1] + z

                x_start = R[-4]
                # Set up initial values and parameters
                A = x_start  # starting time
                B = x_end  # ending time

                N = 4  # number of subintervals which is always 4 because the the adam bashforth formula with 4 used

                # Provide initial arrays for t and y (not necessarily at the same intervals)
                # put x array in t_intial
                t_initial = R
                # put y array in y_intial
                y_initial = Q
                z_value = Z
                # Interpolate the initial values to match the desired time steps

                # we could remove the interpolate and just substiute give function but
                # we interpoleted to check things in between  the values because we found out at first we substuited wrong
                # so we used inter polition and just didnt want to change it
                y_interpolated = interp1d(t_initial, y_initial, kind='linear', fill_value="extrapolate")
                z_interpolated = interp1d(t_initial, z_value, kind='linear', fill_value="extrapolate")

                # Initialize arrays
                # T is the x/time intervel array with the t or x that u want to calculate at

                T = np.linspace(A, B, N + 1)

                # W is the the value of the function  with the y  and x that you want to calculate value of the function
                W = np.zeros(N + 1)

                V = np.zeros(N + 1)
                # Output file setup

                # Initialize using interpolated initial values
                # W is the y/y intervel array with the y that you want to calculate value of the function
                for i in range(N + 1):
                    W[i] = y_interpolated(T[i])
                #    print(f"{i + 1}   {T[i]:.3f} {W[i]:.7f}")
                for i in range(N + 1):
                    V[i] = z_interpolated(T[i])
                #    print(f"{i + 1}   {T[i]:.3f} {W[i]:.7f}")

                # time end-time end/number of intervels
                # Calculate step size
                H = (B - A) / N

                # Predictor-corrector method for the remaining steps

                # Predictor step
                Part1 = 55.0 * F(T[-2], W[-2], V[-2]) - 59.0 * F(T[-3], W[-3], V[-3]) + 37.0 * F(T[-4], W[-4], V[-4])
                Part2 = -9.0 * F(T[-5], W[-5], V[-5])
                Wn = W[-2] + H * (Part1 + Part2) / 24.0
                Vn = V[-2] + H * (Part1 + Part2) / 24.0

                # corrector step
                for i in range(n):
                    Part1 = 9.0 * F(T[-1], Wn, Vn) + 19.0 * F(T[-2], W[-2], V[-2]) - 5.0 * F(T[-3], W[-3], V[-3]) + F(
                        T[-4], W[-4], V[-4])
                    # print(F(T[-1], Wn,Vn))
                    W[-1] = W[-2] + H * (Part1) / 24.0
                    Wn = W[-1]
                    V[-1] = V[-1] + H * Part1 / 24.0
                    Vn = V[-1]

                # print(F(T[-1],W[-1]))
                print("this is the y corrected")
                return W[-1]
            else:
                print("not equal array sizes")
        else:
            print("minimum array size is 4")



    def predictor1(self,F, R, Q, n):
            # Define the ODE function
            z = R[-1] - Q[-2]
            x_end = R[-1] + z

            if len(R) > 3 and len(Q) > 3:
                    if len(R) == len(Q):

                            x_start = R[-4]
                            # Set up initial values and parameters
                            A = x_start  # starting time
                            B = x_end  # ending time

                            N = 4  # number of subintervals which is always 4 because the the adam bashforth formula with 4 used

                            # Provide initial arrays for t and y (not necessarily at the same intervals)
                            # put x array in t_intial
                            t_initial = R
                            # put y array in y_intial
                            y_initial = Q

                            # Interpolate the initial values to match the desired time steps

                            # we could remove the interpolate and just substiute give function but
                            # we interpoleted to check things in between  the values because we found out at first we substuited wrong
                            # so we used inter polition and just didnt want to change it
                            y_interpolated = interp1d(t_initial, y_initial, kind='linear', fill_value="extrapolate")

                            # Initialize arrays
                            # T is the x/time intervel array with the t or x that u want to calculate at

                            T = np.linspace(A, B, N + 1)

                            # W is the the value of the function  with the y  and x that you want to calculate value of the function
                            W = np.zeros(N + 1)

                            # Output file setup

                            # Initialize using interpolated initial values
                            # W is the y/y intervel array with the y that you want to calculate value of the function
                            for i in range(N + 1):
                                    W[i] = y_interpolated(T[i])
                            #    print(f"{i + 1}   {T[i]:.3f} {W[i]:.7f}")

                            # time end-time end/number of intervels
                            # Calculate step size
                            H = (B - A) / N

                            # Predictor-corrector method for the remaining steps

                            # Predictor step
                            Part1 = 55.0 * F(T[-2], W[-2]) - 59.0 * F(T[-3], W[-3]) + 37.0 * F(T[-4], W[-4])
                            Part2 = -9.0 * F(T[-5], W[-5])
                            Wn = W[-2] + H * (Part1 + Part2) / 24.0

                            # corrector step
                            for i in range(n):
                                    Part1 = 9.0 * F(T[-1], Wn) + 19.0 * F(T[-2], W[-2]) - 5.0 * F(T[-3], W[-3]) + F(
                                            T[-4],
                                            W[-4])
                                    W[-1] = W[-2] + H * Part1 / 24.0
                                    Wn = W[-1]

                                    # print(F(T[-1],W[-1]))
                            print("this is the y corrected")
                            return (W[-1])
                    else:
                            print("not equal array sizes")
            else:
                    print("minimum array size is 4")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Predictor()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())




